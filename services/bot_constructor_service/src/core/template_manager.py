# services\bot_constructor_service\src\core\template_manager.py
from loguru import logger
from typing import List, Dict, Optional


class TemplateManager:
    """
    Manager for handling bot templates.
    """

    def __init__(self):
        """Initialize the TemplateManager with preloaded templates."""
        self.templates: Dict[int, Dict] = self._load_templates()
        logger.info("TemplateManager initialized with templates")

    def _load_templates(self) -> Dict[int, Dict]:
        """
        Load predefined templates into the system.

        Returns:
            Dict[int, Dict]: A dictionary of predefined templates.
        """
        logger.info("Loading predefined templates")
        # Example templates
        templates = {
            1: {
                "id": 1,
                "name": "Greeting Bot",
                "description": "A bot to greet users",
                "blocks": [
                    {"type": "message", "content": {"text": "Hello, welcome!"}},
                    {"type": "message", "content": {"text": "How can I assist you today?"}},
                ],
            },
            2: {
                "id": 2,
                "name": "Polling Bot",
                "description": "A bot for conducting polls",
                "blocks": [
                    {"type": "poll", "content": {"question": "What is your favorite color?", "options": ["Red", "Blue", "Green"]}},
                ],
            },
        }
        logger.info(f"Loaded templates: {list(templates.keys())}")
        return templates

    def get_templates(self) -> List[Dict]:
        """
        Retrieve a list of all available templates.

        Returns:
            List[Dict]: A list of templates.
        """
        logger.info("Fetching all templates")
        return list(self.templates.values())

    def get_template_by_id(self, template_id: int) -> Optional[Dict]:
        """
        Retrieve a specific template by its ID.

        Args:
            template_id (int): ID of the template to retrieve.

        Returns:
            Optional[Dict]: Template data if found, None otherwise.
        """
        logger.info(f"Fetching template with ID: {template_id}")
        return self.templates.get(template_id)

    def create_bot_from_template(self, template_id: int, user_id: int) -> Dict:
        """
        Create a bot instance from a specified template.

        Args:
            template_id (int): ID of the template to use.
            user_id (int): ID of the user creating the bot.

        Returns:
            Dict: Data of the newly created bot.
        """
        logger.info(f"Creating bot from template ID: {template_id} for user ID: {user_id}")
        template = self.get_template_by_id(template_id)
        if not template:
            logger.error(f"Template with ID {template_id} not found")
            raise ValueError(f"Template with ID {template_id} not found")

        # Example bot creation logic
        new_bot = {
            "id": 123,  # This ID would typically be generated by the database
            "user_id": user_id,
            "name": template["name"],
            "description": template["description"],
            "blocks": template["blocks"],
        }
        logger.info(f"Bot created from template: {new_bot}")
        return new_bot
